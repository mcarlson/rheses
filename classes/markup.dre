<!-- The MIT License (MIT)

Copyright ( c ) 2014 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<!--/**
      * @class dr.markup {UI Components}
      * @extends dr.view
      * A view that uses the sizetodom mixin. You can also put HTML inside
      * the element and it will show up in the page.
      * 
      * This example creates a view that contains some HTML text. The view
      * will be sized to fit the text.
      * 
      *     @example
      *     <markup>
      *         <b>Here is some text</b> that is really just HTML.
      *     </markup>
      * 
      * This example creates a view that contains some HTML text. The view
      * will flow the text at a width of 50 pixels and have its height
      * automatically sized to fit the flowed text. If you later want to
      * let the view size its width to the dom just call 
      * setAttribute('width', 'auto').
      * 
      *     @example
      *     <markup width="50">
      *         <b>Here is some text</b> that is really just HTML.
      *     </markup>
      */-->
<class name="markup" with="sizetodom" type="coffee" initchildren="false">
  <!--/**
    * @attribute {String} [markup='']
    * Sets the inner HTML of this view. Since the < and > characters are
    * not typically supported in the places you'll be configuring this
    * attributes, you can use [ and ] and they will be transformed into < and >.
    * If you need to insert a literal [ character use &amp;#91;. If you need
    * to insert a literal ] character use &amp;#93;.
    */-->
  <attribute name="markup" type="string" value=""></attribute>
  <setter name="markup" args="markup">
    markup = @unescape(markup)
    @markup ?= ''
    if markup isnt @markup
      @sprite.setInnerHTML(markup)
      if @inited then @sizeToDom()
    return markup
  </setter>

  <!--/**
    * @method unescape
    * Used to support an alternate syntax for markup since the < and >
    * characters are restricted in most places you will want assign the
    * markup to this view. The alternte syntax uses the [ and ] characters to
    * represent < and > respectively. If you need to insert a literal [ or ]
    * character use &amp;#91; or &amp;#93; respectively.
    * @param str The string to unescape.
    * @returns {String} The unescaped string.
    * @private
    */-->
  <method name="unescape" args="str">
    return str.split('[').join('&lt;').split(']').join('&gt;')
  </method>
</class>
