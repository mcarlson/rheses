<!-- The MIT License (MIT)

Copyright ( c ) 2014 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->

<!--/**
   * @class dr.twojs {UI Components}
   * @extends dr.view
   * View that is enabled with two dimensional drawing capabilities by making use of the twojs library.
   *
   *     @example
   *     <twojs bgcolor="MistyRose" width="285" height="200">
   *       <handler event="oninit">
   *         var circle = this.two.makeCircle(72, 72, 50);
   *         circle.fill = '#FF8000';
   *         circle.stroke = 'orangered';
   *         circle.linewidth = 5;
   *         this.two.update();
   *       </handler>
   *     </twojs>
   *
   * In addition to having access to the "two" instance, you also have access to the Two namespace, which provides methods and types you may need. Here we create Two.Anchor instances to create a bezier curve. 
   *
   *     @example
   *     <twojs bgcolor="pink" width="100" height="100">
   *       <handler event="oninit">
   *         var a1 = new Two.Anchor(0, 100, 0, 0, 60, -10, Two.Commands.curve);
   *         var a2 = new Two.Anchor(100, 0, -90, 30, 0, 0, Two.Commands.curve);
   *         var poly = this.two.makeCurve([a1,a2], true);
   *         poly.fill = "pink";
   *         this.two.update();
   *       </handler>
   *     </twojs>
   */-->
<class name="twojs" width="800" height="400" type="coffee" scriptincludes="lib/two.min.js" bgcolor="lightgrey">

  <!--/**
    * @attribute {Object} two
    * Reference to the twojs context that provides API's for two dimensional drawing.
    */-->
  
  <handler event="onwidth" method="handleResize"></handler>
  <handler event="onheight" method="handleResize"></handler>
  
  <handler event="oninit">
    params = {width:@width, height:@height}
    @two = new Two(params).appendTo(@sprite.el);
  </handler>

  <method name="handleResize">
    return unless @two
    @two.width = @width
    @two.height = @height
    @two.update();
  </method>
</class>
