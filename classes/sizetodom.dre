<!-- The MIT License (MIT)

Copyright ( c ) 2014-2015 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<!--/**
      * @class dr.sizetodom {UI Components}
      * @extends dr.state
      * Enables a view to size itself to the dom elements it contains. This
      * is a reversal of the standard relationship where the "model" pushes
      * changes into the DOM.
      * 
      * You can configure the markup either via the 'markup' attribute, or
      * you can put HTML inside the element and it will be used during
      * initialization. Once a component has been created you should only
      * update via the markup attribute.
      * 
      * If you set an explicit width or height sizing to dom will be suspended
      * for that axis. If later you want to restore the size to dom behavior
      * set the width or height to a value of 'auto'.
      *
      * If you make a modification to the DOM through a means other than
      * setting the markup attribute and that modification results in a change
      * in the size of the DOM you will need to call the sizeToDom method
      * to trigger an update of the width and height of the view.
      * 
      */-->
<class name="sizetodom" type="coffee" width="auto" height="auto">
  <!-- Border changes the size of the DOM so do a sizeToDom. -->
  <setter name="topborder" args="v">
    retval = @super()
    if @inited then @sizeToDom()
    return retval
  </setter>

  <setter name="bottomborder" args="v">
    retval = @super()
    if @inited then @sizeToDom()
    return retval
  </setter>

  <setter name="leftborder" args="v">
    retval = @super()
    if @inited then @sizeToDom()
    return retval
  </setter>

  <setter name="rightborder" args="v">
    retval = @super()
    if @inited then @sizeToDom()
    return retval
  </setter>

  <!-- Padding changes the size of the DOM so do a sizeToDom. -->
  <setter name="toppadding" args="v">
    retval = @super()
    if @inited then @sizeToDom()
    return retval
  </setter>

  <setter name="bottompadding" args="v">
    retval = @super()
    if @inited then @sizeToDom()
    return retval
  </setter>

  <setter name="leftpadding" args="v">
    retval = @super()
    if @inited then @sizeToDom()
    return retval
  </setter>

  <setter name="rightpadding" args="v">
    retval = @super()
    if @inited then @sizeToDom()
    return retval
  </setter>

  <setter name="width" args="v, noDomChange">
    if not @__internalUpdate and not @__noSpecialValueHandling
      if v is 'auto'
        @__hasSetWidth = false
        @sprite.setAttribute('width', 'auto')
        if @inited then @sizeToDom()
        return dr._noop
      else
        @__hasSetWidth = true
    return @super()
  </setter>

  <setter name="height" args="v, noDomChange">
    if not @__internalUpdate and not @__noSpecialValueHandling
      if v is 'auto'
        @__hasSetHeight = false
        @sprite.setAttribute('height', 'auto')
        if @inited then @sizeToDom()
        return dr._noop
      else
        @__hasSetHeight = true
    return @super()
  </setter>

  <!--/**
    * Reduce number of sizeToDom calls during initialization.
    * @private
    */-->
  <method name="initialize" args="skipevents">
    # For some reason replication creates views without sprites.
    # See pivotal #88868214
    return unless @sprite
    
    # Makes initial border and padding work
    @sprite.setAttribute('width', 'auto') if @width is @__fullBorderPaddingWidth
    @sprite.setAttribute('height', 'auto') if @height is @__fullBorderPaddingHeight
    
    @sizeToDom()
    @super()
  </method>

  <!--/**
    * @method sizeToDom
    * Sizes this view to the current size of the DOM elements within it.
    * @returns {void}
    */-->
  <method name="sizeToDom">
    bounds = @sprite.getBounds()
    
    @__internalUpdate = true
    unless @__hasSetWidth then @set_width(bounds.width, true)
    unless @__hasSetHeight then @set_height(bounds.height, true)
    @__internalUpdate = false
  </method>
</class>
