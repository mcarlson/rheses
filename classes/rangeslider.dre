<!-- The MIT License (MIT)

Copyright ( c ) 2014 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->

<!--/**
   * @class dr.rangeslider {UI Components}
   * @extends dr.view
   * An input component whose upper and lower bounds are changed via mouse clicks or drags.
   *
   *     @example
   *
   *     <rangeslider name="range" width="300" height="40" x="10" y="30" lowselectcolor="#00CCFF" highselectcolor="#FFCCFF" outline="2px dashed #00CCFF"
   *                  lowvalue="30"
   *                  highvalue="70">
   *     </rangeslider>
   *
   *     <text name="rangeLabel" color="white" height="40"
   *           y="${this.parent.range.y + (this.parent.range.height / 2) - (this.height / 2)}"
   *           x="${(this.parent.range.lowvalue * 3) + (((this.parent.range.highvalue * 3) - (this.parent.range.lowvalue * 3)) / 2) - (this.width / 2)}"
   *           text="${Math.round(this.parent.range.lowvalue) + ' ~ ' + Math.round(this.parent.range.highvalue)}"></text>
   *
   *
   * A range slider highlights the inclusive values by default, however this behavior can be reversed with `exclusive="true"`.
   * The following example demonstrates an exclusive-valued, inverted (range goes from high to low) horizontal slider.
   *
   *     @example
   *
   *     <rangeslider name="range" width="400" x="10" y="30" lowselectcolor="#AACCFF" highselectcolor="#FFAACC""
   *                  height="30"
   *                  lowvalue="45"
   *                  highvalue="55"
   *                  invert="true"
   *                  exclusive="true">
   *     </rangeslider>
   *
   *     <text name="highRangeLabel" color="#666" height="20"
   *           y="${this.parent.range.y + (this.parent.range.height / 2) - (this.height / 2)}"
   *           x="${(((this.parent.range.maxvalue * 4) - (this.parent.range.highvalue * 4)) / 2) - (this.width / 2)}"
   *           text="${this.parent.range.maxvalue + ' ~ ' + Math.round(this.parent.range.highvalue)}"></text>
   *
   *     <text name="lowRangeLabel" color="#666" height="20"
   *           y="${this.parent.range.y + (this.parent.range.height / 2) - (this.height / 2)}"
   *           x="${(this.parent.range.width - (this.parent.range.lowvalue * 4)) + (((this.parent.range.lowvalue * 4) - (this.parent.range.minvalue * 4)) / 2) - (this.width / 2)}"
   *           text="${Math.round(this.parent.range.lowvalue) + ' ~ ' + this.parent.range.minvalue}"></text>
   *
   */-->
<class name="rangeslider" type="coffee" clickable="true" clip="true">

    <handler event="oninit" method="visualize"></handler>
    <handler event="onwidth" method="visualize"></handler>
    <handler event="onheight" method="visualize"></handler>

    <!--/**
      * @attribute {Number} [minvalue=0]
      * The minimum value of the slider
      */-->
    <attribute name="minvalue" type="number" value="0"></attribute>

    <!--/**
    * @attribute {Number} [minhighvalue=0]
    * The minimum value of the right slider
    */-->
    <attribute name="minhighvalue" type="number" value="0"></attribute>

    <!--/**
      * @attribute {Number} [maxvalue=100]
      * The maximum value of the slider
      */-->
    <attribute name="maxvalue" type="number" value="100"></attribute>

    <!--/**
      * @attribute {Number} [maxlowvalue=100]
      * The maximum value of the lower bound slider
      */-->
    <attribute name="maxlowvalue" type="number" value="100"></attribute>

    <!--/**
      * @attribute {"x"/"y"} [axis=x]
      * The axis to track on
      */-->
    <attribute name="axis" type="string" value="x"></attribute>

    <!--/**
      * @attribute {Boolean} [invert=false]
      * Set to false to have the scale run lower to higher, true to run higher to lower.
      */-->
    <attribute name="invert" type="boolean" value="false"></attribute>

    <!--/**
      * @attribute {Boolean} [exclusive=false]
      * Set to true to highlight the outer (exclusive) values of the range, false to select the inner (inclusive) values.
      */-->
    <attribute name="exclusive" type="boolean" value="false"></attribute>

    <!--/**
      * @attribute {Number} [lowvalue=50]
      * The current value of the left slider.
      * Use changeLowValue() to range check the number and set the value.
      */-->
    <attribute name="lowvalue" type="number" value="50"></attribute>
    <handler event="onlowvalue" method="visualize"></handler>
    <setter name="lowvalue" args="lv">
        return Math.min(@maxlowvalue, Math.max(lv, @minvalue))
    </setter>


    <!--/**
      * @attribute {Number} [highvalue=50]
      * The current value of the right slider.
      * Use changeHighValue() to range check the number and set the value.
      */-->
    <attribute name="highvalue" type="number" value="50"></attribute>
    <handler event="onhighvalue" method="visualize"></handler>
    <setter name="highvalue" args="hv">
        return Math.max(@minhighvalue, Math.min(hv, @maxvalue))
    </setter>

    <!--/**
      * @attribute {String} [lowselectcolor="#a0a0a0"]
      * The selected color of the lower bound slider.
      */-->
    <attribute name="lowselectcolor" type="string" value="transparent"></attribute>
    <handler event="onlowselectcolor" method="visualize"></handler>

    <!--/**
      * @attribute {String} [highselectcolor="#a0a0a0"]
      * The selected color of the upper bound slider.
      */-->
    <attribute name="highselectcolor" type="string" value="transparent"></attribute>
    <handler event="onhighselectcolor" method="visualize"></handler>

    <!-- Internal view to show the current right slider value -->
    <view name="highvalueview" bgcolor="${this.parent.highselectcolor}"></view>
    <art name="highindicator" clickable="false" rotation="270" x="${this.parent.highvalueview.x - this.width}" y="${this.parent.height - this.height}"
         height="${this.parent.highvalueview.height}" width="${this.parent.highvalueview.height}" inline="true">
        <!--
        <svg name="triangle" height="100" width="100">
            <polygon name="polygon" points="0,100 0,0 100,100"/>
        </svg>
        -->
    </art>

    <!-- Internal view to show the current left slider value -->
    <view name="lowvalueview" bgcolor="${this.parent.lowselectcolor}"></view>
    <art name="lowindicator" clickable="false" x="${this.parent.lowvalueview.x + this.parent.lowvalueview.width}" y="${this.parent.height - this.height}"
         height="${this.parent.lowvalueview.height}" width="${this.parent.lowvalueview.height}" inline="true">
        <!--
        <svg name="triangle" height="100" width="100">
            <polygon name="polygon" points="0,100 0,0 100,100"/>
        </svg>
        -->
    </art>

    <!-- visualize: Show the current value -->
    <method name="visualize">
        if @axis == 'x'

          if @exclusive
            lw = @width * ((@lowvalue - @minvalue) / (@maxvalue - @minvalue))

            x = if @invert then (@width - lw) else 0

            @lowvalueview.setAttributes({x:x, y:0, width:lw, height:@height})
            @lowvalueview.setAttribute('background', @lowselectcolor)

            hw = @width * ((@maxvalue - @highvalue) / (@maxvalue - @minvalue))
            hx = if @invert then 0 else (@width - hw)

            @highvalueview.setAttributes({x:hx, y:0, width:hw, height:@height})

          else
            w = @width * ((@highvalue - @lowvalue) / (@maxvalue - @minvalue))
            x = @width * ((@lowvalue - @minvalue) / (@maxvalue - @minvalue))

            x = (@width - w) - x if @invert

            @lowvalueview.setAttributes({x:x, y:0, width:w, height:@height})
            @highvalueview.setAttributes({x:x, y:0, width:w, height:@height})
            @lowvalueview.setAttribute('background', 'linear-gradient(to right, ' + @lowselectcolor + ', ' + @highselectcolor + ')')

        else

          if @exclusive
            lh = @height * ((@lowvalue - @minvalue) / (@maxvalue - @minvalue))

            y = if @invert then (@height - lh) else 0

            @lowvalueview.setAttributes({x:0, y:y, width:@width, height:lh})
            @lowvalueview.setAttribute('background', @lowselectcolor)

            hh = @height * ((@maxvalue - @highvalue) / (@maxvalue - @minvalue))
            hy = if @invert then 0 else (@height - hh)

            @highvalueview.setAttributes({x:0, y:hy, width:@width, height:hh})

          else
            h = @height * ((@highvalue - @lowvalue) / (@maxvalue - @minvalue))
            y = @height * ((@lowvalue - @minvalue) / (@maxvalue - @minvalue))

            y = (@height - h) - y if @invert

            @lowvalueview.setAttributes({x:0, y:y, width:@width, height:h})
            @highvalueview.setAttributes({x:0, y:y, width:@width, height:h})
            @lowvalueview.setAttribute('background', 'linear-gradient(' + @lowselectcolor + ', ' + @highselectcolor + ')')

    </method>

    <!-- Apply dragstate when the mouse is down on the slider component. -->
    <handler event="onmousedown">
        @movePosition(if @axis == 'x' then dr.mouse.x else dr.mouse.y)
        @drag.setAttribute('applied', true);
    </handler>
    <handler event="onmouseup">
        @drag.setAttribute('applied', false);
    </handler>
    <handler event="onmouseupoutside">
        @drag.setAttribute('applied', false);
    </handler>

    <!-- Move the slider in response to a change in position -->
    <method name="movePosition" args="p">
        spread = @maxvalue - @minvalue;

        if (@axis == 'x')

          if (@width > 0)
            val = ((p - @getAbsolute().x) / @width * spread) + @minvalue
            val = @maxvalue - val if @invert

            ld = Math.abs(@lowvalue - val)
            hd = Math.abs(@highvalue - val)

            if (ld < hd)
              @setAttribute('lowvalue', val)
            else
              @setAttribute('highvalue', val)

        else

          if (@height > 0)
            val = ((p - @getAbsolute().y) / @height * spread) + @minvalue
            val = @maxvalue - val if @invert

            ld = Math.abs(@lowvalue - val)
            hd = Math.abs(@highvalue - val)

            if (ld < hd)
              @setAttribute('lowvalue', val)
            else
              @setAttribute('highvalue', val)

    </method>

    <!-- The @drag.applied can be removed when states are fixed to
         remove global handlers. -->
    <state name="drag" type="coffee">
        <handler event="onx" reference="dr.mouse" args="x">
            @movePosition(x) if @drag.applied && @axis == 'x'
        </handler>
        <handler event="ony" reference="dr.mouse" args="y">
            @movePosition(y) if @drag.applied && @axis == 'y'
        </handler>
    </state>
</class>
