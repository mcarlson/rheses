<!-- The MIT License (MIT)

Copyright ( c ) 2014 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
   <!--/**
     * @class dr.simplelayout
     * @extends dr.layout
     * A layout that stacks views on the x or y axis.
     *
     *
     *     @example
     *     <simplelayout axis="y"></simplelayout>
     *
     *     <view width="100" height="25" bgcolor="lightpink"></view>
     *     <view width="100" height="25" bgcolor="plum"></view>
     *     <view width="100" height="25" bgcolor="lightblue"></view>
     */-->
    <class name="simplelayout" extends="layout" type="coffee">
      <attribute name="attribute" type="string" value="width"></attribute>
      <!--/**
        * @attribute {Number} [inset=0]
        * Amount to inset the layout
        */-->
      <attribute name="inset" type="number" value="0"></attribute>
      <!--/**
        * @attribute {Number} [spacing=15]
        * Amount of spacing between views
        */-->
      <attribute name="spacing" type="number" value="15"></attribute>
      <!--/**
        * @attribute {"x"/"y"} [axis=x]
        * The axis to stack on
        */-->
      <attribute name="axis" type="string" value="x"></attribute>
      <handler event="oninset" args="inset">
        # console.log('oninset', inset)
        @update()
      </handler>
      <handler event="onsubview" args="subview">
        # console.log('onsubview', @axis, @update, subview, this)
        @listenTo(subview, 'visible', @update)
        @listenTo(subview, @attribute, @update)
      </handler>
      <setter name="spacing" args="spacing">
        # console.log('spacing setter', spacing, this)
        @update()
      </setter>
      <setter name="axis" args="axis">
        attribute = switch axis
          when 'x' then 'width' 
          when 'y' then 'height'

        # console.log 'coffee', axis, arguments, @, @parent 
        unless @skip() 
          for subview in @parent.subviews
            @stopListening(subview, @axis, @update)
            @listenTo(subview, newaxis, @update)

        @attribute = attribute

        # console.log('set_attribute', axis, typeof axis, @attribute, @axis, attribute)
        @update()
      </setter>
      <method name="update" args="value, sender">
        # console.log('skip', @skip(), @locked)
        return if @skip()
        locked = @locked
        @locked = true

        pos = @inset
        skip = true if sender
        for subview, index in @parent.subviews
          continue if subview.ignorelayout or not subview.visible
          if (skip and subview != sender and not subview.visible)
            # console.log 'skipping', index, subview, sender
          else 
            # console.log 'updating', subview.visible, index, subview, @axis, pos, @parent.subviews
            subview.setAttribute(@axis, pos) unless subview[@axis] == pos
            skip = false
          # console.log 'value', pos, @spacing, @inset, @axis, @attribute, subview, subview[@attribute]
          pos += @spacing + subview[@attribute] 
        @locked = locked
        return pos
      </method>
    </class>
