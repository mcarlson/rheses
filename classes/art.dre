<!-- The MIT License (MIT)

Copyright ( c ) 2014 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->

  <!--/**
     * @class dr.art
     * @extends dr.view
     * Vector graphics support using svg.
     *
     * This example shows how to load an existing svg
     *
     *     @example
     *     <art width="100" height="100" src="/images/siemens-clock.svg"></art>
     *
     * Paths within an svg can be selected using the path attribute
     *
     *     @example
     *     <art width="100" height="100" src="/images/cursorshapes.svg" path="0"></art>
     *
     * Attributes are automatically passed through to the SVG. Here, the fill color is changed
     *
     *     @example
     *     <art width="100" height="100" src="/images/cursorshapes.svg" path="0" fill="coral"></art>
     *
     * Setting the path attribute animates between paths. This example animates when the mouse is clicked
     *
     *     @example
     *     <art width="100" height="100" src="/images/cursorshapes.svg" path="0" fill="coral">
     *       <handler event="onclick">
     *         this.setAttribute('path', this.path ^ 1);
     *       </handler>
     *     </art>
     *
     * By default, the SVG's aspect ratio is preserved. Set the stretches attribute to true to change this behavior.
     *
     *     @example
     *     <art width="200" height="100" src="/images/cursorshapes.svg" path="0" fill="coral" stretches="true">
     *       <handler event="onclick">
     *         this.setAttribute('path', this.path ^ 1);
     *         this.animate({width: (this.width == 200 ? 100 : 200)});
     *       </handler>
     *     </art>
     *
     */-->    

      <!--/**
        * @attribute {Boolean} [inline=false]
        * Set to true if the svg contents is found inline, as a comment
        */-->

      <!--/**
        * @attribute {Boolean} stretches [stretches=false]
        * Set to true to stretch the svg to fill the view.
        */-->

      <!--/**
        * @attribute {String} src
        * The svg contents to load
        */-->

      <!--/**
        * @attribute {String|Number} path
        * The svg path element to display. Can either be the name of the &lt;g&gt; element containing the path or a 0-based index.
        */-->

      <!--/**
        * @attribute {Number} [animationspeed=400]
        * The number of milliseconds to use when animating between paths
        */-->

      <!--/**
        * @attribute {"linear"/"easeout"/"easein"/"easeinout"/"backin"/"backout"/"elastic"/"bounce"} [animationcurve="linear"]
        * The name of the curve to use when animating between paths
        */-->

      <!--/**
        * @event onready
        * Fired when the art is loaded and ready
        */-->

      <!--/**
        * @event ontween
        * Fired when the art has animated its path to the next position
        */-->

    <class name="art" type="coffee" scriptincludes="/lib/snap.svg-min.js" clickable="true">
      <attribute name="inline" value="false" type="boolean"></attribute>
      <attribute name="src" value="" type="string"></attribute>
      <attribute name="animationspeed" value="400" type="number"></attribute>
      <attribute name="animationcurve" value="linear" type="string"></attribute>

      <attribute name="stretches" value="false" type="boolean"></attribute>
      <handler event="onstretches" method="resizeArt"></handler>

      <attribute name="path" value="" type="string"></attribute>
      <handler event="onpath">
        return if @path.length == 0 or not @container
        @animate_path(@path)
      </handler>

      <setter name="src" args="src">
        return if !src
        return if @src == src
        @src = src
      </setter>

      <handler event="oninit">
        # Retrieve the entire inline contents
        if @inline
          @inline_data = @sprite.getText()
          @sprite.setText('')
          @loadInline() if @inline

        @loadFromFile() if @src
      </handler>

      <method name="setAttribute" args="name, value">
        # If debug=true, show attributes that pass through to the svg
        debug = window.location.search.indexOf('debug') > 0
        if debug
          @expectedAttr = ['x','y','width','height','parent','clip','id','scrollable','clickable','visible','$textcontent','$tagname','inline','src','path','stretches','animationspeed','animationcurve'] unless @expectedAttr
          unless name in @expectedAttr
            console.warn('Passing attribute', name, 'to svg')
      </method>


      <method name="show_path" args="name">
        # Retrieve an svg path given its name, or index
        path = @get_path(name)
        if path
          d1 = path[0].getAttribute('d')
          @createSnap()
          @snappath = @snap.path(d1)
      </method>


      <method name="animate_path" args="name, params">
        # Animate the path, as well as specified params
        return @show_path(name) if !@snap

        curve = mina[@animationcurve] or mina.linear
        params = {} if !params

        # Animate to a given path, by name, or id
        path = @get_path(name)
        if path
          d1 = path[0].getAttribute('d')
          params['d'] = d1
          @snappath.animate params, @animationspeed, curve, =>
            @sendEvent('tween')
      </method>



      <method name="createDOM">
        # Create a div to handle resizing of the graphics
        return if @container      

        @container = document.createElement('div')
        #@container.setAttribute('style', 'overflow: hidden; width: 100%; height: 100%')
        @container.$init = true;  # Prevent warnings
        @sprite.el.appendChild(@container)
      </method>

      <method name="createSnap">
        return if @snap
        @snap = Snap()

        # Create another div to handle resizing
        @snapcontainer = document.createElement('div')
        @snapcontainer.setAttribute('style', 'overflow: hidden; width: 100%; height: 100%')
        @sprite.el.appendChild(@snapcontainer)

        @snap.appendTo(@snapcontainer)

        # Set the viewBox to the bounding box of all paths
        rect = @get_bounding_box()
        viewbox = rect.x + ' ' + rect.y + ' ' + rect.width + ' ' + rect.height
        @snap.attr({viewBox: viewbox})

        # If this object is clickable, listen to mouse events
        if @clickable
          @snap.click => @sendEvent('click')
          @snap.mousedown => @sendEvent('mousedown')
          @snap.mouseup => @sendEvent('mouseup')
          @snap.mousemove => @sendEvent('mousemove')
          @snap.mouseover => @sendEvent('mouseover')
          @snap.mouseout => @sendEvent('mouseout')

        @resizeArt()

        # Hide the static svg object
        @hide_art()

      </method>


      <method name="hide_art", args="fixed">
        # Hide either fixed art (fixed=true or missing) or snap (false)
        fixed = true if not fixed?
        $(@container).hide() if @container and fixed
        $(@snapcontainer).hide() if @snapcontainer and not fixed
      </method>

      <method name="get_path" args="name">
        # Read the path information from the svg using id and then index
        return null if !@container

        # Assume name is a named element
        path = $(@container).find('svg').find('g#'+name).find('path')
        return path if path.length == 1

        # Try using name as an index
        index = parseInt(name)
        return null if isNaN(index)
        elements = $(@container).find('svg').find('g').find('path')
        return null if (elements.length-1) < index

        return $(elements[index])
      </method>

      <method name="get_paths">
        # Get every path specified in the svg
        dom = @container
        return null if !dom

        paths = $(dom).find('svg').find('g').find('path')
        return paths
      </method>

      <method name="get_bounding_box">
        # Get the bounding box of all the paths
        paths = @get_paths()
        for path, index in paths
          box = path.getBBox()
          if !rect
            rect = jQuery.extend({}, box)   # clone so IE doesn't error
            x1 = box.x + box.width
            y1 = box.y + box.height
          else
            rect.x = Math.min(rect.x, box.x)
            rect.y = Math.min(rect.y, box.y)
            x1 = Math.max(x1, box.x + box.width)
            y1 = Math.max(y1, box.y + box.height)
        if rect
          # Use floor/ceil to create a viewBox that covers all paths
          x1 = Math.ceil(x1)
          y1 = Math.ceil(y1)
          rect.x = Math.floor(rect.x)
          rect.y = Math.floor(rect.y)
          rect.width = x1 - rect.x
          rect.height = y1 - rect.y

        return rect
      </method>

      <handler event="onready" method="normalizeArt"></handler>

      <method name="normalizeArt">
        return unless @container

        # Normalize the svg by setting width and height to 100%, and
        # adding a viewBox if one is missing
        elements = $(@container).find('svg')
        for svg, index in elements
          # If width_orig is found it means this method has already run
          continue if svg.getAttribute('width_orig')

          # Rewrite width and height, saving the original values
          w = svg.getAttribute('width')
          h = svg.getAttribute('height')
          svg.setAttribute('width_orig', w)
          svg.setAttribute('height_orig', h)
          svg.setAttribute('width', '100%')
          svg.setAttribute('height', '100%')
          # console.log('svg size set from ', w, h)

          # Add a viewPort if one is missing and w,h was absolute
          viewBox = svg.getAttribute('viewBox')
          svg.setAttribute('viewBox_orig', viewBox) if viewBox
          if w && h && !viewBox
            # Add a viewBox to match the size
            viewBox = '0 0 ' + w + ' ' + h
            svg.setAttribute('viewBox', viewBox)
            # console.log('new viewBox', viewBox)

          # Add click events
          if @clickable
            $(svg).on 'click', => @sendEvent('click')
            $(svg).on 'mousedown', => @sendEvent('mousedown')
            $(svg).on 'mouseup', => @sendEvent('mouseup')
            $(svg).on 'mousemove', => @sendEvent('mousemove')
            $(svg).on 'mouseover', => @sendEvent('mouseover')
            $(svg).on 'mouseout', => @sendEvent('mouseout')

        @resizeArt()

        # Move to the specified path
        @animate_path(@path) if @path.length > 0
      </method>

      <method name="resizeArt">
        # Resize the art, if needed, for changes in container size

        # Apply stretches to the static svg
        if @container and @stretches
          elements = $(@container).find('svg')
          if elements.length > 0
            svg = elements[0]
            if @stretches
              svg.setAttribute('preserveAspectRatio', 'none')
            else
              svg.removeAttribute('preserveAspectRatio')

        # Apply stretches to the snap svg
        if @snap
          svg = $(@snap.node)[0]
          if @stretches
            svg.setAttribute('preserveAspectRatio', 'none')
          else
            svg.removeAttribute('preserveAspectRatio')
      </method>

      <method name="loadInline">
        # Load inline svg
        @createDOM()

        @inline_data = @inline_data.trim()
        # Remove comments. Comments are used to prevent compile errors
        match = new RegExp(/^\s*\<\!--(.*)--\>/).exec(@inline_data);
        if !!match
          @inline_data = match[1]

        $(@container).html(@inline_data)

        # Refresh the div
        $(@container).html($(@container).html())

        # Trigger ready
        #TODO Can this be improved? I tried binding to DOM events, svg loaded
        setTimeout ( =>
          @sendEvent('ready')
        ), 1
      </method>

      <method name="loadFromFile">
        # Load an svg file
        @createDOM()

        # Fire onload when the graphic is loaded
        _this = this
        $(@container).load @src, ->
          # Generate onready event
          _this.sendEvent('ready')
      </method>

    </class>
