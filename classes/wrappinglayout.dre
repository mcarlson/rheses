<!-- The MIT License (MIT)

Copyright ( c ) 2014 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<!--/**
      * @class dr.wrappinglayout {Layout}
      * @extends dr.variablelayout
      * An extension of variableLayout similar to spaced layout but with the
      * added functionality of wrapping the views onto a new line (or column
      * if the axis is "y") whenever they would overflow the available space. 
      * This layout positions views horizontally or vertically using an initial
      * inset and spacing between each view. The outset is used in the 
      * calculation of available space so that the last view in each line will 
      * have at least "outset" space after it.
      *
      * Lines/Columns are positioned in a similar fashion to the individual views
      * using lineinset, linespacing and lineoutset. If updateparent is true
      * the lineoutset is used to leave space after the last line.
      *
      * A line break can be forced by using a "break" layouthint on a managed
      * view. The layout hint "break" will force the subview to start a new
      * line/column with that subview as the first view in the line/column.
      *
      * Since wrappinglayouts rely on the innerwidth/height of the parent view
      * to determine when to wrap auto sizing on the parent view along the same
      * axis as the wrappinglayout will result in unexpected behavior and 
      * should therefore be avoided.
      * 
      *     @example
      *     <view width="500" height="150" bgcolor="#FFF4FC">
      *       <wrappinglayout axis="y" spacing="2" inset="5" outset="5" lineinset="10" linespacing="5" lineoutset="10">
      *       </wrappinglayout>
      *
      *       <view width="120" height="35" bgcolor="lightpink"></view>
      *       <view width="120" height="45" bgcolor="plum" layouthint='{"break":true}'></view>
      *       <view width="120" height="25" bgcolor="lightblue"></view>
      *       <view width="120" height="25" bgcolor="lightblue"></view>
      *       <view width="120" height="25" bgcolor="lightblue"></view>
      *       <view width="120" height="25" bgcolor="lightblue"></view>
      *       <view width="120" height="25" bgcolor="lightblue"></view>
      *     </view>
      */-->
<class name="wrappinglayout" extends="variablelayout" type="coffee">
  <method name="construct" args="el, attributes">
    # Use whichever attribute or aliases attribute is not the default and
    # delete the unnecessary initial value.
    if attributes.value isnt '0' and attributes.inset is '0'
      attributes.inset = attributes.value
    delete attributes.value
    
    if attributes.attribute isnt 'x' and attributes.axis is 'x'
      attributes.axis = attributes.attribute
    delete attributes.attribute
    
    @super()
  </method>
  
  <!--/**
    * @attribute {Number} [spacing=0]
    * The spacing between views.
    */-->
  <attribute name="spacing" type="number" value="0"></attribute>
  <handler event="onspacing" method="update"></handler>
  
  <!--/**
    * @attribute {Number} [outset=0]
    * Space after the last view.
    */-->
  <attribute name="outset" type="number" value="0"></attribute>
  <handler event="onoutset" method="update"></handler>
  
  <!--/**
    * @attribute {Number} [inset=0]
    * Space before the first view. This is an alias for the "value" attribute.
    */-->
  <attribute name="inset" type="number" value="0"></attribute>
  <setter name="inset" args="inset">
    # An alias for value.
    @setAttribute('value', inset);
    return inset
  </setter>
  
  <!--/**
    * @attribute {Number} [linespacing=0]
    * The spacing between each line of views.
    */-->
  <attribute name="linespacing" type="number" value="0"></attribute>
  <handler event="onlinespacing" method="update"></handler>
  
  <!--/**
    * @attribute {Number} [lineoutset=0]
    * Space after the last line of views. Only used when updateparent is true.
    */-->
  <attribute name="lineoutset" type="number" value="0"></attribute>
  <handler event="onlineoutset" method="update"></handler>
  
  <!--/**
    * @attribute {Number} [lineinset=0]
    * Space before the first line of views.
    */-->
  <attribute name="lineinset" type="number" value="0"></attribute>
  <handler event="onlineinset" method="update"></handler>
  
  <!--/**
    * @attribute {boolean} [justify=false]
    * Justifies lines/columns
    */-->
  <attribute name="justify" type="boolean" value="false"></attribute>
  <handler event="onjustify" method="update"></handler>
  
  <!--/**
    * @attribute {String} [align='left']
    * Aligns lines/columns left/top, right/bottom or center/middle. If
    * justification is true this has no effect except on a line or column that
    * has only one item.
    */-->
  <attribute name="align" type="string" value="left"></attribute>
  <handler event="onalign" method="update"></handler>
  
  <!--/**
    * @attribute {String} [linealign='none']
    * Aligns the items in a line relative to each other. Supported values are
    * top/left, bottom/right and middle/center and none. If the value is
    * none, no line alignment will be performed which means transformed views
    * may overlap preceeding lines.
    */-->
  <attribute name="linealign" type="string" value="none"></attribute>
  <handler event="onlinealign" method="update"></handler>
  <setter name="linealign" args="linealign">
    switch linealign
      when 'right', 'bottom','center', 'middle','top', 'left'
        # __isLineAligned indicates that some form of line alignemnt is being 
        # used. This means full bounds will be used for line heights.
        @__isLineAligned = true
      else
        @__isLineAligned = false
    return linealign
  </setter>
  
  <!--/**
    * @attribute {String} [axis='x']
    * The orientation of the layout. Supported values are 'x' and 'y'.
    * A value of 'x' will orient the views horizontally with lines being
    * positioned vertically below the preceding line. A value of 'y' will 
    * orient the views vertically with columns positioned horizontally to 
    * the right of the preceding column. This is an alias for the "attribute" 
    * attribute.
    */-->
  <attribute name="axis" type="string" value="x"></attribute>
  <setter name="axis" args="axis">
    # An alias for attribute.
    @setAttribute('attribute', axis);
    return axis
  </setter>
  
  <!--/**
    * @attribute attribute
    * @private
    * The axis attribute is an alias for this attribute.
    */-->
  <setter name="attribute" args="attribute">
    if @attribute isnt attribute
      # Stop monitoring since the "axis" changed. This needs to
      # be done before the new "axis" value is set since stopMonitoringSubview
      # needs to know the old values.
      @stopMonitoringAllSubviews()
      
      # Setup private attributes based on axis
      if attribute == 'y'
        # The layout is oriented vertically
        @__parentAttrName = 'width'             # The attr to update on the parent if updateparent is true
        @__innerAttrName = 'innerheight'        # The attr used to get available space
        @__measureAttrName = 'boundsheight'     # The attr to measure the size needed for a subview
        @__diffAttrName = 'boundsydiff'         # The attr used to offset the position of a transformed subview so it will not overlap adjacent views
        @__otherInnerAttrName = 'innerwidth'
        @__otherMeasureAttrName = 'boundswidth'
        @__otherDiffAttrName = 'boundsxdiff'
        @__otherAttribute = 'x'
      else
        # The layout is oriented horizontally
        @__parentAttrName = 'height'
        @__innerAttrName = 'innerwidth'
        @__measureAttrName = 'boundswidth'
        @__diffAttrName = 'boundsxdiff'
        @__otherInnerAttrName = 'innerheight'
        @__otherMeasureAttrName = 'boundsheight'
        @__otherDiffAttrName = 'boundsydiff'
        @__otherAttribute = 'y'
      
      @setAndFire('attribute', attribute)
      
      if @inited
        # Start monitoring again and update since we have a new axis. This needs
        # to be done after the new axis value is set since startMonitoringSubview
        # needs to use the new values.
        @startMonitoringAllSubviews()
        @update()
      else
        @__redoMonitoring = true
    
    return dr._noop
  </setter>
  
  <handler event="oninit">
    if @__redoMonitoring
      @stopMonitoringAllSubviews()
      @startMonitoringAllSubviews()
  </handler>
  
  <method name="stopMonitoringAllSubviews" args="view">
    @super()
    if @__innerAttrName? then @stopListening(@parent, @__innerAttrName, @update)
  </method>
  
  <method name="startMonitoringAllSubviews" args="view">
    @super()
    @listenTo(@parent, @__innerAttrName, @update)
  </method>
  
  <method name="startMonitoringSubview" args="view">
    @super()
    
    # Monitor each subview's measure and bounds offset along both axes
    @listenTo(view, @__measureAttrName, @update)
    @listenTo(view, @__diffAttrName, @update)
    @listenTo(view, @__otherMeasureAttrName, @update)
    @listenTo(view, @__otherDiffAttrName, @update)
    @listenTo(view, 'layouthint', @update)
  </method>
  
  <method name="stopMonitoringSubview" args="view">
    @super()
    
    # No longer monitor each subview's measure and bounds offset along both axes
    @stopListening(view, @__measureAttrName, @update)
    @stopListening(view, @__diffAttrName, @update)
    @stopListening(view, @__otherMeasureAttrName, @update)
    @stopListening(view, @__otherDiffAttrName, @update)
    @stopListening(view, 'layouthint', @update)
  </method>
  
  <method name="doBeforeUpdate">
    # The number of lines layed out.
    @linecount = 1
    
    # An array of the items layed out in the current line
    @__lineItems = []
    
    # The maximum size achieved by any line.
    @maxsize = 0
    
    # Track the maximum size of a line. Used to determine how much to
    # update __linePos by when wrapping occurs.
    @__lineSize = 0
    
    # The position for each subview in a line. Gets updated for each new
    # line of subviews.
    @__linePos = @lineinset
    
    # The size of the parent view. Needed to determine when to wrap. The
    # outset is already subtracted as a performance optimization.
    @__parentSizeLessOutset = @parent[@__innerAttrName] - @outset
    
    # Initialize the __spacingAfter var since it won't get set if no hint
    # exists on the first view and justify is true.
    if @justify then @__spacingAfter = @spacing
    
    @doLineStart(@linecount, @value)
  </method>
  
  <method name="updateSubview" args="count, view, attribute, value">
    name = @name
    size = view[@__measureAttrName]
    
    # The amount the view extends beyond the line/column position
    otherSize = view[@__otherMeasureAttrName]
    if not @__isLineAligned
      otherSize -= view[@__otherDiffAttrName]
    
    # Check for overflow or 'break'
    if value + size > @__parentSizeLessOutset or view.getLayoutHint(name, 'break')
      @doLineEnd(@linecount, @__lineItems, value - @__spacingAfter)
      
      # Track max size achieved during layout.
      @maxsize = Math.max(@maxsize, value + @outset - @__spacingAfter)
      
      # Reset to the beginning of the line/column and push down/over by line size.
      value = @value # Reset to inset.
      @__linePos += @__lineSize + @linespacing
      @__lineSize = otherSize
      @__lineItems = []
      @__spacingAfter = @spacing
      
      ++@linecount
      @doLineStart(@linecount, value)
    else if otherSize > @__lineSize
      # Update line size if this subview is larger
      @__lineSize = otherSize
    
    # Position for the line/column
    view.setAttribute(@__otherAttribute, @__linePos)
    
    
    @__lineItems.push(view)
    # Determine hint based spacing if not justified
    if not @justify and @__lineItems.length > 1
      before = view.getLayoutHint(name, 'spacingbefore')
      unless isNaN before
        value += before - @__spacingAfter
    
    # Position the view at the provided value and compensate for 
    # any transformation position difference
    view.setAttribute(attribute, view[@__diffAttrName] + value)
    
    # Use spacingafter hint if defined instead of spacing
    if not @justify
      @__spacingAfter = view.getLayoutHint(name, 'spacingafter')
      if isNaN @__spacingAfter then @__spacingAfter = @spacing
    
    # The next view should be positioned after this view plus the spacing.
    return value + size + @__spacingAfter
  </method>
  
  <!--/**
    * @method doLineStart
    * Called at the start of the laying out of each line.
    * @param {Number} lineindex The index of the line being layed out.
    * @param {*} value The value at the start of laying out the line.
    * @return {void}
    */-->
  <method name="doLineStart" args="lineindex, value">
    # Subclasses to implement as needed.
  </method>
  
  <!--/**
    * @method doLineEnd
    * Called at the end of the laying out of each line.
    * @param {Number} lineindex The index of the line being layed out.
    * @param {Array} items The items layed out in the line in the order they
    * were layed out.
    * @param {*} value The value at the end of laying out the line.
    * @return {void}
    */-->
  <method name="doLineEnd" args="lineindex, items, value">
    # Do linealign
    if @__isLineAligned
      otherAttribute = @__otherAttribute
      otherDiffAttrName = @__otherDiffAttrName
      otherMeasureAttrName = @__otherMeasureAttrName
      lineMaxSize = @__lineSize
      
      switch @linealign
        when 'right', 'bottom'
          for item in items
            item.setAttribute(otherAttribute, item[otherDiffAttrName] + item[otherAttribute] + lineMaxSize - item[otherMeasureAttrName])
        when 'center', 'middle'
          for item in items
            item.setAttribute(otherAttribute, item[otherDiffAttrName] + item[otherAttribute] + (lineMaxSize - item[otherMeasureAttrName]) / 2)
        when 'top', 'left'
          for item in items
            item.setAttribute(otherAttribute, item[otherDiffAttrName] + item[otherAttribute])
    
    # Justify lines with extra space if justify is turned on.
    if @justify
      itemcount = items.length
      # Can't justify only 1 item
      if itemcount > 1
        extra = @__parentSizeLessOutset - value
        if extra > 0
          amount = extra / (itemcount - 1)
          
          # Reposition each item in the line after the first one by the amount
          attribute = @attribute
          i = 1
          while itemcount > i
            item = items[i++]
            item.setAttribute(attribute, item[attribute] + (i - 1) * amount)
        return
    
    # No justification case or justification of 1 item falls through to here.
    switch @align
      when 'right', 'bottom'
        extra = @__parentSizeLessOutset - value
      when 'center', 'middle'
        extra = (@__parentSizeLessOutset - value) / 2
      else
        extra = -1
    if extra > 0
      # Reposition each item in the line
      attribute = @attribute
      for item in items
        item.setAttribute(attribute, item[attribute] + extra)
  </method>
  
  <!--/**
    * @event onlinecount
    * Fired after update.
    * @param {Number} The number of lines layed out for x-axis layouts or 
    * columns for layed out for y-axis layouts.
    */-->
  <!--/**
    * @event onmaxsize
    * Fired after update.
    * @param {Number} The maximum width achieved by any line for x-axis layouts
    * or maximum height achieved by any column for y-axis layouts.
    */-->
  <method name="doAfterUpdate" args="value">
    # Need the call here too since the last line/column falls through to here 
    # without going into the overflow check.
    @doLineEnd(@linecount, @__lineItems, value - @__spacingAfter)
    
    # Track max size achieved during layout.
    @maxsize = Math.max(@maxsize, value + @outset - @__spacingAfter)
    
    @sendEvent('linecount', @linecount)
    @sendEvent('maxsize', @maxsize)
  </method>
  
  <method name="updateParent" args="attribute, value">
    # Resize the parent and allow for the difference between innersize and size
    # due to border and padding.
    parent = @parent
    parent.setAttribute(@__parentAttrName, @__linePos + @__lineSize + @lineoutset + parent[@__parentAttrName] - parent[@__otherInnerAttrName])
  </method>
</class>
