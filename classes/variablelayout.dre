<!-- The MIT License (MIT)

Copyright ( c ) 2014 Teem2 LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->
<!--/**
      * @class dr.variablelayout {Layout}
      * @extends dr.constantlayout
      * Allows for variation based on the index and subview. An updateSubview 
      * method is provided that can be overriden to provide variable behavior.
      *
      *     @example
      *     <variablelayout attribute="x" value="10">
      *     </variablelayout>
      *
      *     <view width="100" height="25" bgcolor="lightpink"></view>
      *     <view width="100" height="25" bgcolor="plum"></view>
      *     <view width="100" height="25" bgcolor="lightblue"></view>
      */-->
<class name="variablelayout" extends="constantlayout" type="coffee">
  <!--/**
    * @attribute {boolean} [collapseparent=false]
    * If true the updateParent method will be called. The updateParent method 
    * will typically resize the parent to fit the newly layed out child views.
    */-->
  <attribute name="collapseparent" type="boolean" value="false"></attribute>
  <handler event="oncollapseparent" method="update"></handler>
  
  <!--/**
    * @attribute {boolean} [reverse=false]
    * If true the layout will position the items in the opposite order. For 
    * example, right to left instead of left to right.
    */-->
  <attribute name="reverse" type="boolean" value="false"></attribute>
  <handler event="onreverse" method="update"></handler>
  
  <!--/**
    * @method doBeforeUpdate
    * Called by update before any processing is done. Gives subviews a
    * chance to do any special setup before update is processed.
    * @return {void}
    */-->
  <method name="doBeforeUpdate">
    # Subclasses to implement as needed.
  </method>
  
  <!--/**
    * @method doAfterUpdate
    * Called by update after any processing is done but before the optional
    * collapsing of parent is done. Gives subviews a chance to do any 
    * special teardown after update is processed.
    * @return {void}
    */-->
  <method name="doAfterUpdate">
    # Subclasses to implement as needed.
  </method>
  
  <!--/**
    * @method startMonitoringSubview
    * Provides a default implementation that calls update when the
    * visibility of a subview changes.
    * @param {dr.view} view
    */-->
  <method name="startMonitoringSubview" args="view">
    @listenTo(view, 'visible', @update)
  </method>
  
  <!--/**
    * @method stopMonitoringSubview
    * Provides a default implementation that calls update when the
    * visibility of a subview changes.
    * @param {dr.view} view
    */-->
  <method name="stopMonitoringSubview" args="view">
    @stopListening(view, 'visible', @update)
  </method>
  
  <!--/**
    * @method updateSubview
    * Called for each subview in the layout.
    * @param {Number} count The number of subviews that have been layed out
    *   including the current one. i.e. count will be 1 for the first
    *   subview layed out.
    * @param {dr.view} view The subview being layed out.
    * @param {String} attribute The name of the attribute to update.
    * @param {*} value The value to set on the subview.
    * @return {*} The value to use for the next subview.
    */-->
  <method name="updateSubview" args="count, view, attribute, value">
    view.setAttribute(attribute, value)
    return value
  </method>
  
  <!--/**
    * @method skipSubview
    * Called for each subview in the layout to determine if the view should
    * be updated or not. The default implementation returns true if the 
    * subview is not visible.
    * @param {dr.view} view The subview to check.
    * @return {Boolean} True if the subview should be skipped during 
    *   layout updates.
    */-->
  <method name="skipSubview" args="view">
    return !view.visible
  </method>
  
  <!--/**
    * @method updateParent
    * Called if the collapseparent attribute is true. Subclasses should 
    * implement this if they want to modify the parent view.
    * @param {String} attribute The name of the attribute to update.
    * @param {*} value The value to set on the parent.
    * @return {void}
    */-->
  <method name="updateParent" args="attribute, value">
    # Subclasses to implement as needed.
  </method>
  
  <method name="update" invokesuper="inside">
    if @canUpdate()
      # Prevent inadvertent loops
      @locked = true
      
      @doBeforeUpdate()
      
      attribute = @attribute
      value = @value
      svs = @subviews
      len = svs.length
      count = 0
      
      if @reverse
        i = len
        while i
          sv = svs[--i]
          if @skipSubview(sv) then continue
          value = @updateSubview(++count, sv, attribute, value)
      else
        i = 0
        while len > i
          sv = svs[i++]
          if @skipSubview(sv) then continue
          value = @updateSubview(++count, sv, attribute, value)
      
      @doAfterUpdate()
      
      if @collapseparent then @updateParent(attribute, value)
      
      @locked = false
  </method>
</class>
