{
  "name": "json-ptr",
  "version": "0.1.1",
  "author": {
    "name": "Phillip Clark",
    "email": "phillip@flitbit.com"
  },
  "description": "A complete implementation of JSON Pointer (RFC 6901) for nodejs and modern browsers.",
  "main": "index.js",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "devDependencies": {
    "expect.js": "~0.2.x",
    "mocha": "~1.10.x"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/flitbit/json-ptr"
  },
  "readme": "# json-ptr [![Build Status](https://travis-ci.org/flitbit/json-ptr.png)](http://travis-ci.org/flitbit/json-ptr)\n\nA complete implementation of JSON Pointer (RFC 6901) for nodejs and modern browsers.\n\n## Installation\n\n[node.js](http://nodejs.org)\n```bash\n$ npm install json-ptr\n```\n\n## Tests\n\nTests use [mocha](http://visionmedia.github.io/mocha/) and [expect.js](https://github.com/LearnBoost/expect.js/), so if you clone the [github repository](https://github.com/flitbit/json-ptr) you'll need to run:\n\n```bash\nnpm install\n```\n\n... followed by ...\n\n```bash\nnpm test\n```\n\n... or ...\n\n```bash\nmocha -R spec\n```\n\n## Basics\n\n!! This document is a work in progress even though the module is considered *complete*. See the [examples of its use for more](https://github.com/flitbit/json-ptr/tree/master/examples).\n\nJSON Pointer provides a standardized syntax for reliably referencing data within an object's structure.\n\n### Importing\n\n**nodejs**\n```javascript\nvar JsonPointer = require('json-ptr')\n```\n\n**browser**\n```html\n<script src=\"json-ptr-0.1.0.min.js\"></script>\n```\n\n### Working with Pointers\n\nSince most non-trivial code will make use of the same pointers over and over again (after all they represent the fixed points within a larger structure), with `json-ptr`you can create these pointers once and reuse them against different data items.\n\n```javascript\nvar manager = JsonPointer.create('/people/workplace/reporting/manager');\nvar director = JsonPointer.create('/people/workplace/reporting/director');\n```\n\nPointers have a few simple operations:\n\n* `#get` - given an origin object, returns the referenced value\n* `#set` - given an origin object and a value, sets the referenced value\n\nAnd a few useful properties:\n\n* `#pointer` - an RFC 6901 formatted JSON pointer\n* `#uriFragmentIdentifier` - an RFC 6901 formatted URI fragment identifier\n* `#path` - an array of property names used to descend the object graph from the origin to the referenced item\n\n## Example\n\n\nThis example queries the live flikr api for recent images with 'surf' and 'pipeline'. It then extracts the author and the referenced media item.\n\nClone the repo and run it on the command line using `node example/example1.js` and you'll see the output. Of note: `json-ptr` will return `undefined` when any part of a pointer's path cannot be resolved, which makes this type of extraction very convenient and compact.\n\n[flikr example](https://github.com/flitbit/json-ptr/blob/master/examples/example1.js)\n```javascript\nvar ptr = require('json-ptr')\n, http = require('http')\n, util = require('util')\n;\n\nvar feed = \"http://api.flickr.com/services/feeds/photos_public.gne?tags=surf,pipeline&tagmode=all&format=json&jsoncallback=processResponse\"\n/*\n * Set up some JSON pointers we'll use later...\n*/\n, items = ptr.create(\"#/items\")\n, author = ptr.create(\"#/author\")\n, media = ptr.create(\"#/media/m\")\n;\n\nfunction extractItems(it) {\n\treturn items.get(it);\n}\n\nfunction extractAuthorAndMedia(it, i) {\n\tthis.push({\n\t\tauthor: author.get(it),\n\t\tmedia : media.get(it)\n\t});\n}\n\nfunction processResponse(json) {\n\tvar items = extractItems(json)\n\t, accum = []\n\t;\n\n\tif (items && Array.isArray(items)) {\n\t\titems.forEach(extractAuthorAndMedia, accum);\n\t}\n\n\tconsole.log( util.inspect(accum, true, 99) );\n}\n\nhttp.get(feed, function(res) {\n\tconsole.log(\"Got response: \" + res.statusCode);\n\n\tvar data = '';\n\n\tres.on('data', function (chunk){\n\t\tdata += chunk;\n\t});\n\n\tres.on('end',function(){\n\t\t// result is formatted as jsonp... this is for illustration only.\n\t\teval(data);\n\t})\n}).on('error', function(e) {\n\tconsole.log(\"Got error: \" + e.message);\n});\n```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/flitbit/json-ptr/issues"
  },
  "_id": "json-ptr@0.1.1",
  "dist": {
    "shasum": "bab82a31e292ce7af9e3fc7fd65acd1bbb9248e8",
    "tarball": "http://registry.npmjs.org/json-ptr/-/json-ptr-0.1.1.tgz"
  },
  "_from": "json-ptr@>=0.1.1-0 <0.2.0-0",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "flitbit",
    "email": "phillip@flitbit.com"
  },
  "maintainers": [
    {
      "name": "flitbit",
      "email": "phillip@flitbit.com"
    }
  ],
  "_shasum": "bab82a31e292ce7af9e3fc7fd65acd1bbb9248e8",
  "_resolved": "https://registry.npmjs.org/json-ptr/-/json-ptr-0.1.1.tgz",
  "homepage": "https://github.com/flitbit/json-ptr"
}
