Ext.data.JsonP.subclassing({"guide":"<h1 id='subclassing-section-dreem-language-guide'>Dreem Language Guide</h1>\n\n<h3 id='subclassing-section-subclassing-in-dream'>Subclassing in Dream</h3>\n\n<p>New dream objects (a.k.a new html <code>&lt;tags/&gt;</code>) can be created using the <code>&lt;class&gt;&lt;/class&gt;</code> tag.</p>\n\n<p>For example, if we wanted to create a “user” object that lays out a user's profile information, it might look something like this:</p>\n\n<pre class='inline-example small'><code>&lt;class type=\"coffee\" name=\"user\"&gt;\n    &lt;attribute name=\"firstname\" type=\"string\" value=\"\"&gt;&lt;/attribute&gt;\n    &lt;attribute name=\"lastname\" type=\"string\" value=\"\"&gt;&lt;/attribute&gt;\n\n    &lt;text name=\"firstnamelabel\" text=\"${this.parent.firstname}\" color=\"darkblue\"&gt;&lt;/text&gt;\n    &lt;text name=\"lastnamelabel\" text=\"${this.parent.lastname}\" color=\"darkblue\"&gt;&lt;/text&gt;\n&lt;/class&gt;\n\n&lt;user width=\"100\" height=\"40\" bgcolor=\"lightyellow\" firstname=\"Bobert\" lastname=\"Chu\"&gt;&lt;/user&gt;\n</code></pre>\n\n<p>It works, but you'll notice the names are on top of one another.  Let's fix that and create a subclass.  Lets say we have another type of user,\nand employee, which has an extra “job title” field:</p>\n\n<pre class='inline-example small'><code>&lt;class type=\"coffee\" name=\"user\"&gt;\n    &lt;attribute name=\"firstname\" type=\"string\" value=\"Donathan\"&gt;&lt;/attribute&gt;\n    &lt;attribute name=\"lastname\" type=\"string\" value=\"Chillburger\"&gt;&lt;/attribute&gt;\n\n    &lt;text name=\"firstnamelabel\" text=\"${this.parent.firstname}\"&gt;&lt;/text&gt;\n    &lt;text name=\"lastnamelabel\" text=\"${this.parent.lastname}\"&gt;&lt;/text&gt;\n\n    &lt;handler event=\"oninit\"&gt;\n      tx = 0\n      for subview in @subviews\n        subview.setAttribute('x', tx)\n        tx = subview.x + subview.width + 5\n    &lt;/handler&gt;\n&lt;/class&gt;\n\n&lt;class name=\"employee\" extends=\"user\" type=\"coffee\"&gt;\n  &lt;attribute name=\"jobtitle\" type=\"string\" value=\"\"&gt;&lt;/attribute&gt;\n  &lt;text name=\"joblabel\" text=\"${this.parent.jobtitle}\" color=\"red\"&gt;&lt;/text&gt;\n&lt;/class&gt;\n\n&lt;employee jobtitle=\"COO\"&gt;&lt;/employee&gt;\n</code></pre>\n\n<p>You’ll note in dreem, the subclass's views appear first in the ordering.\nIn this case that isn't what we want, so we'll override the <code>layoutelements</code> method to put the job title last.</p>\n\n<pre class='inline-example small'><code>&lt;class type=\"coffee\" name=\"user\"&gt;\n    &lt;attribute name=\"firstname\" type=\"string\" value=\"Donathan\"&gt;&lt;/attribute&gt;\n    &lt;attribute name=\"lastname\" type=\"string\" value=\"Chillburger\"&gt;&lt;/attribute&gt;\n\n    &lt;text name=\"firstnamelabel\" text=\"${this.parent.firstname}\"&gt;&lt;/text&gt;\n    &lt;text name=\"lastnamelabel\" text=\"${this.parent.lastname}\"&gt;&lt;/text&gt;\n\n    &lt;handler event=\"oninit\" method=\"layoutelements\"&gt;&lt;/handler&gt;\n    &lt;method type=\"coffee\" name=\"layoutelements\"&gt;\n      tx = 0\n      for subview in @subviews\n        subview.setAttribute('x', tx)\n        tx = subview.x + subview.width + 5\n    &lt;/method&gt;\n&lt;/class&gt;\n\n&lt;class type=\"coffee\" name=\"employee\" extends=\"user\"&gt;\n    &lt;text name=\"joblabel\" text=\"COO\" color=\"pink\"&gt;&lt;/text&gt;\n    &lt;method type=\"coffee\" name=\"layoutelements\"&gt;\n        @super();\n        @joblabel.setAttribute('x', @lastnamelabel.x + @lastnamelabel.width + 10);\n    &lt;/method&gt;\n&lt;/class&gt;\n\n&lt;employee&gt;&lt;/employee&gt;\n</code></pre>\n\n<p>Note the subclasses uses the <code>@super()</code> method to invoke the parent class's implementation of the method.</p>\n","title":"Dreem Language Guide"});